{"version":3,"sources":["webpack:///./src/js/theme/product-accordion.js"],"names":["Accordion","accordion","control","container","closest","selectors","activeControls","querySelectorAll","controlActive","target","controls","getAttribute","panel","document","getElementById","active","length","panelItem","dataset","panelType","classList","toggle","panelActive","slideToggle","forEach","isSelected","setAttribute","e","console","log","els","getPanelElements","isActive","containerHasActive","togglePanel","canToggleSelf","this","options","containers","addEventListener","handleControlClick","accordions","window","dgd","components"],"mappings":"6MAEaA,EACT,WAAYC,GAAW,oDA8BP,SAACC,GACnB,IAAMC,EAAYD,EAAQE,QAAR,UAAmB,EAAKC,UAAUF,YAC9CG,EAAiBH,EAAUI,iBAAV,UAA8B,EAAKF,UAAUH,QAA7C,YAAwD,EAAKG,UAAUG,gBAC9F,MAAO,CACNL,YACAM,OAAQ,CACPN,YACAO,SAAUP,EAAUI,iBAAV,yBAA6CL,EAAQS,aAAa,iBAAlE,MACVC,MAAOC,SAASC,eAAeZ,EAAQS,aAAa,mBAErDI,OAAQ,CACPZ,YACAO,SAAUJ,EACVM,MAAON,EAAeU,OAAS,EAAIH,SAASC,eAAeR,EAAe,GAAGK,aAAa,kBAAoB,UA3CvF,wBAoDZ,SAACM,GACQA,EAAUd,UAAUe,QAAlCC,UAGRF,EAAUL,MAAMQ,UAAUC,OAAO,EAAKhB,UAAUiB,aAGhDC,sBAAYN,EAAUL,OAGtBK,EAAUP,SAASc,SAAQ,SAACtB,GAC3BA,EAAQkB,UAAUC,OAAO,EAAKhB,UAAUG,eAM/B,IAAMiB,EAAuD,SAA1CvB,EAAQS,aAAa,iBACxCT,EAAQwB,aAAa,iBAAkBD,SAtExB,+BA6ED,SAACE,GAKzB,IAAMzB,EAAUyB,EAAElB,OAAOL,QAAQ,EAAKC,UAAUH,SAChD,GAAIA,EAAS,CACZ0B,QAAQC,IAAI3B,GAKZ,IAAM4B,EAAM,EAAKC,iBAAiB7B,GAM5B8B,EAAWF,EAAIrB,OAAOC,SAAS,KAAOoB,EAAIf,OAAOL,SAAS,GAM1DuB,EAAqBH,EAAIf,OAAOL,SAASM,OAAS,EAEpDgB,EAEH,EAAKE,YAAYJ,EAAIrB,QACVuB,IAAYG,gBAEnBF,GACH,EAAKC,YAAYJ,EAAIf,QAItB,EAAKmB,YAAYJ,EAAIrB,aAhHjB2B,KAAKC,QAAU,CACpBhC,UAAW,CACVF,UAAW,mBACXD,QAAS,2BACTM,cAAe,SACfI,MAAO,2BACPU,YAAa,WAITc,KAAK/B,UAAY+B,KAAKC,QAAQhC,UAE9B+B,KAAKE,WAAL,UAAsBzB,SAASN,iBAAiB6B,KAAK/B,UAAUF,YAG/DiC,KAAK1B,SAAWG,SAASN,iBAAiB6B,KAAK/B,UAAUH,SAE/DkC,KAAK1B,SAASc,SAAQ,SAACtB,GACtBA,EAAQqC,iBAAiB,SAAS,SAACZ,GAClC,EAAKa,mBAAmBb,UAmGtBc,EAAa5B,SAASN,iBAAiB,oBAC1CkC,EAAWzB,OAAS,GACnByB,EAAWjB,SAAQ,SAACvB,GAChByC,OAAOC,IAAIC,WAAW5C,UAAY,IAAIA,EAAUC","file":"product-accordion.3e2580574543a3695a7c.js","sourcesContent":["import { slideToggle } from \"./helpers\";\n\nexport class Accordion {\n    constructor(accordion) {\n        this.options = {\n\t\t\tselectors: {\n\t\t\t\tcontainer: '[data-container]',\n\t\t\t\tcontrol: '[data-accordion-trigger]',\n\t\t\t\tcontrolActive: 'active',\n\t\t\t\tpanel: '[data-accordion-content]',\n\t\t\t\tpanelActive: 'active',\n\t\t\t},\n\t\t};\n\n        this.selectors = this.options.selectors;\n\n        this.containers = [...document.querySelectorAll(this.selectors.container)];\n\n\n        this.controls = document.querySelectorAll(this.selectors.control);\n\n\t\tthis.controls.forEach((control) => {\n\t\t\tcontrol.addEventListener('click', (e) => {\n\t\t\t\tthis.handleControlClick(e);\n\t\t\t});\n\t\t});\n    }\n\n    \t/**\n\t * Given a control element, get it's corresponding panel element, and the active control and panel.\n\t * @param  {Node} control\tTarget control element.\n\t * @return {Object}         Object containing target control and panel, as well as active control and panel, if available.\n\t */\n\tgetPanelElements = (control) => {\n\t\tconst container = control.closest(`${this.selectors.container}`);\n\t\tconst activeControls = container.querySelectorAll(`${this.selectors.control}.${this.selectors.controlActive}`);\n\t\treturn {\n\t\t\tcontainer,\n\t\t\ttarget: {\n\t\t\t\tcontainer,\n\t\t\t\tcontrols: container.querySelectorAll(`[aria-controls=${control.getAttribute('aria-controls')}]`),\n\t\t\t\tpanel: document.getElementById(control.getAttribute('aria-controls')),\n\t\t\t},\n\t\t\tactive: {\n\t\t\t\tcontainer,\n\t\t\t\tcontrols: activeControls,\n\t\t\t\tpanel: activeControls.length > 0 ? document.getElementById(activeControls[0].getAttribute('aria-controls')) : null,\n\t\t\t},\n\t\t};\n\t}\n\n    \t/**\n\t * Toggle the selectors and aria attributes of the control and panel.\n\t * @param  {Object} panelItem Object containing the control and panel to toggle.\n\t */\n\ttogglePanel = (panelItem) => {\n\t\tconst { panelType } = panelItem.container.dataset;\n\n\t\t// Toggle panel selectors and aria attribues.\n\t\tpanelItem.panel.classList.toggle(this.selectors.panelActive);\n\n\t\t// Slide the accordion content open or closed depending on it's current state.\n\t\tslideToggle(panelItem.panel);\n\n\t\t// Toggle control selectors and aria attributes.\n\t\tpanelItem.controls.forEach((control) => {\n\t\t\tcontrol.classList.toggle(this.selectors.controlActive);\n\n            /**\n             * Toggle the w3.org recommended attributes on the accordion controls.\n             * @link https://www.w3.org/TR/wai-aria-practices/examples/accordion/accordion.html\n             */\n            const isSelected = control.getAttribute('aria-expanded') === 'true';\n            control.setAttribute('aria-expanded', !isSelected);\n\t\t});\n\t}\n\n\t/**\n\t * Tab click-event handler.\n\t */\n     handleControlClick = (e) => {\n\t\t/**\n\t\t * Use the event target to get the panel control.\n\t\t * @type {Object}\n\t\t */\n\t\tconst control = e.target.closest(this.selectors.control);\n\t\tif (control) {\n\t\t\tconsole.log(control)\n\t\t\t/**\n\t\t\t * Get the target control and panel.\n\t\t\t * @type {Object}\n\t\t\t */\n\t\t\tconst els = this.getPanelElements(control);\n\n\t\t\t/**\n\t\t\t * Check if the target panel is also the active panel.\n\t\t\t * @type {Boolean}\n\t\t\t */\n\t\t\tconst isActive = els.target.controls[0] === els.active.controls[0];\n\n\t\t\t/**\n\t\t\t * Check if container contains an active panel.\n\t\t\t * @type {Boolean}\n\t\t\t */\n\t\t\tconst containerHasActive = els.active.controls.length > 0;\n\n\t\t\tif (isActive) {\n\t\t\t\t// Force toggle if the target is active and canToggleSelf is true.\n\t\t\t\tthis.togglePanel(els.target);\n\t\t\t} else if (!isActive || canToggleSelf) {\n\t\t\t\t// Check if another panel is active, and if so toggle it...\n\t\t\t\tif (containerHasActive) {\n\t\t\t\t\tthis.togglePanel(els.active);\n\t\t\t\t}\n\n\t\t\t\t// ...and then toggle the target.\n\t\t\t\tthis.togglePanel(els.target);\n\t\t\t}\n\t\t}\n\t}\n}\n\nconst accordions = document.querySelectorAll('[data-container]');\nif(accordions.length > 0) {\n    accordions.forEach((accordion) => {\n        window.dgd.components.Accordion = new Accordion(accordion);\n    });\n}\n"],"sourceRoot":""}